version: "3.8"
services:
  
  backend:
    build:
      context: ./backend/.
    depends_on:
      - mysql
    environment:
      SERVICE_NAME: backend
      APP_ENV: production
      APP_DEBUG: 'false'
      APP_NAME: 'Amazing Real Estates'
      APP_LOG_LEVEL: 'error'
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: mysql
      DB_DRIVER: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      QUEUE_CONNECTION: database
      MAIL_MAILER: mailgun
      MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
      MAILGUN_SECRET: ${MAILGUN_SECRET}
      MAILGUN_ENDPOINT: ${MAILGUN_ENDPOINT}
      MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME}
    networks:
      - app_network
    container_name: backend
    volumes:
        - ./backend/.:/app
    restart: unless-stopped
    tty: true
    working_dir: /app
    ports:
      - "9000:9000"

  apiserver:
    image: nginx:1.19.0-alpine
    container_name: apiserver
    restart: unless-stopped
    tty: true
    working_dir: /app
    ports:
      - "8001:8001"
    volumes:
      - ./backend/.:/app
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app_network
    depends_on:
      - backend
    environment:
      SERVICE_NAME: apiserver

  frontend:
    build:
      context: ./frontend/.
    ports:
      - "80:80"
      - "443:443"
    container_name: frontend
    depends_on:
      - apiserver
    networks:
      - app_network
    restart: unless-stopped
    environment:
       SERVICE_NAME: frontend
       REACT_APP_API_URL: '/api'
       NODE_OPTIONS: "--max-old-space-size=700"
       NODE_ENV: production
    tty: true
    volumes: 
     - /home/razvan/certs:/etc/nginx/certs

  mysql:
    image: mysql:5
    environment:
        MYSQL_DATABASE: ${DB_DATABASE}
        MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
        MYSQL_USER:  ${DB_USERNAME}
        MYSQL_PASSWORD:  ${DB_PASSWORD}
    networks:
      - app_network
    ports:
      - 3306:3306
    container_name: mysql
    volumes:
      - dbdata:/var/lib/mysql/
    restart: unless-stopped
    tty: true

  # adminer:
  #   image: adminer
  #   restart: on-failure
  #   tty: true
  #   ports:
  #     - 8080:8080
  #   container_name: adminer
  #   networks:
  #     - app_network

  logioweb:
    hostname: air-logs
    image: 'blacklabelops/logio:latest'
    container_name: logioweb
    environment:
      - 'LOGIO_ADMIN_USER=razvan'
      - 'LOGIO_ADMIN_PASSWORD=razvan'
      - 'LOGIO_CERTIFICATE_DNAME=HTTPS'
    ports:
      - '28778:28778'
    restart: unless-stopped
    volumes:
      - '/opt/server'
      - /home/razvan/certs:/opt/server/keys
    networks:
      - app_network
  
  harvester:
    image: 'blacklabelops/logio:latest'
    container_name: harvester
    environment:
      - 'DELAYED_START=10'
      - 'LOGIO_HARVESTER_NODENAME=DockerLogs'
      - 'LOGIO_HARVESTER_STREAMNAME=UnifiedLogs'
      - 'LOGIO_HARVESTER_LOGFILES='
      - 'LOGS_DIRECTORIES=/var/lib/docker'
      - 'LOG_FILE_PATTERN=*.log'
    volumes:
      - '/var/lib/docker:/var/lib/docker'
    links:
      - logioweb:logio
    user: root
    command: harvester
    restart: unless-stopped
    networks:
      - app_network

networks:
  default:
    external:
        name: app_network
  app_network:
    name: app_network
    driver: bridge

volumes:
  dbdata:
    driver: local
    name: dbdata